{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","email","pass","accept","message","errors","messages","username_incorrect","email_incorrect","password_incorrect","accept_incorrect","handleChange","e","name","target","type","value","_this","setState","Object","defineProperty","checked","console","log","handleSubmit","preventDefault","validation","formValidation","correct","password","length","indexOf","_this2","this","setTimeout","react_default","a","createElement","Fragment","onSubmit","noValidate","htmlFor","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf76766c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    pass: \"\",\n    accept: false,\n    message: \"\",\n\n    errors: {\n      username: false,\n      email: false,\n      pass: false,\n      accept: false\n    }\n  };\n\n  messages = {\n    username_incorrect:\n      \"Login musi być dłuższy niż 10 znaków i nie może zawierać spacji\",\n    email_incorrect: \"Brak znaku @ w adresie e-mail\",\n    password_incorrect: \"Hasło musi mieć dokładnie 8 znaków\",\n    accept_incorrect: \"Akceptacja regulaminu jest konieczna\"\n  };\n\n  handleChange = e => {\n    const name = e.target.name;\n    const type = e.target.type;\n\n    if (type === \"text\" || type === \"password\" || type === \"email\") {\n      const value = e.target.value;\n      this.setState({\n        [name]: value\n      });\n    } else if (type === \"checkbox\") {\n      const checked = e.target.checked;\n      console.log(checked);\n      this.setState({\n        [name]: checked\n      });\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const validation = this.formValidation();\n    console.log(validation);\n\n    if (validation.correct) {\n      this.setState({\n        username: \"\",\n        email: \"\",\n        pass: \"\",\n        accept: false,\n        message: \"Dziękujemy, formularz rejestracyjny został wysłany\",\n\n        errors: {\n          username: false,\n          email: false,\n          pass: false,\n          accept: false\n        }\n      });\n    } else {\n      this.setState({\n        errors: {\n          username: !validation.username,\n          email: !validation.email,\n          pass: !validation.password,\n          accept: !validation.accept\n        }\n      });\n    }\n  };\n\n  // funkcja walidacji\n  formValidation = () => {\n    let username = false;\n    let email = false;\n    let password = false;\n    let accept = false;\n    let correct = false;\n\n    if (\n      this.state.username.length > 10 &&\n      this.state.username.indexOf(\" \") === -1\n    ) {\n      username = true;\n    }\n\n    if (this.state.email.indexOf(\"@\") !== -1) {\n      email = true;\n    }\n\n    if (this.state.pass.length === 8) {\n      password = true;\n    }\n    if (this.state.accept) {\n      accept = true;\n    }\n    if (username && email && password && accept) {\n      correct = true;\n    }\n    return {\n      correct,\n      username,\n      email,\n      password,\n      accept\n    };\n  };\n  // wyświetlanie informacji o wysłaniu formularza\n  componentDidUpdate() {\n    if (this.state.message !== \"\") {\n      setTimeout(\n        () =>\n          this.setState({\n            message: \" \"\n          }),\n        3000\n      );\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <label htmlFor=\"user\">\n            Twój Login\n            <input\n              type=\"text\"\n              id=\"user\"\n              name=\"username\"\n              value={this.state.username}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.username && (\n              <span>{this.messages.username_incorrect}</span>\n            )}\n          </label>\n\n          <label htmlFor=\"user\">\n            Twój email:\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.email && (\n              <span>{this.messages.email_incorrect}</span>\n            )}\n          </label>\n\n          <label htmlFor=\"password\">\n            Twoje Hasło:\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"pass\"\n              value={this.state.pass}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.pass && (\n              <span>{this.messages.password_incorrect}</span>\n            )}\n          </label>\n\n          <label htmlFor=\"accept\">\n            <input\n              type=\"checkbox\"\n              id=\"accept\"\n              name=\"accept\"\n              checked={this.state.accept}\n              onChange={this.handleChange}\n            />\n            Akceptuje warunki regulaminu\n            {this.state.errors.accept && (\n              <span>{this.messages.accept_incorrect}</span>\n            )}\n          </label>\n\n          <button>Zapisz się</button>\n        </form>\n        {this.state.message && <h3>{this.state.message}</h3>}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}